PHP     http://php.net/
HTML    https://www.w3schools.com/
-----------------------------------------------------------------------------
Day 00

Introduction to web
  www --> connects to Google servers
  adress IP: 10.13.2.21 (4 bytes separated by dot)
  Mac address accesses IP address in web.
  Router, gateway
  DNS
  HTTP
  
HTML & CSS
  - Create a html file and access it in the browser file://Users/....file.html
  <HTML> //start tag
  <HEAD>
  </HEAD>
    <TITLE>title of the page</TITLE>
    <STYLE>
      H1 {color: red;}
      #myimage {border: 5px solid red;}
      .myclass {color: green;}
    </STYLE>
  <BODY>
    <H1>Word1</H1> <BR />
    Word2 <BR />
    <IMG id="myimage" SRC="logo-42.JPG">
    <BR />
    <A class="myclass" HREF="http://www.google.com">link</A>
  </BODY>
  </HTML> //end tag
  
-----------------------------------------------------------------------------
Day 01
INTRODUCTION TO PHP
  1. Create prog.php.
  
  #!/usr/bin/php  //php binary run and execute the code.
  <?PHP
  // code php
  
  function my_add($p1, $p2) {
    return $p1 + $p2;
  }
  
  echo "Hello\n";
  // or
  print("Hello\n");
  
  $my_var = 42; // number
  $my_str = "World" // string
  $my_tab = array("zero", "un", "deux");  // array
  
  // The explode() function breaks a string into an array.
  $my_tab = explode(":", "zero:un:deux"); // check manual for explode
  
  $my_hash = array("key1" => "val1", "key2" => "val2");
  
  echo $my_var;
  echo "\n";
  // or
  echo $my_var."\n".$my_str;  // dot will concat
  // or
  echo $my_var\n$my_str;  // dot will concat
  
  $result = "21" + "21";  //calculate
  echo "$result\n";
  
  $my_tab[0] = "00";
  // to access cells from the array:
  echo $my_tab[0];
  echo "\n";
  echo $my_hash["key1"]."\n";
  
  echo "$my_tab\n\n";
  print_r($my_tab);
  // The print_r() function is a built-in function in PHP and is used to print or display information stored in a variable.
  
  echo my_add("36", "6");
  
  // if you have more than 1 instruction use curly brackets {} in if statement below
  if ($my_tab[1] == "un")
  echo "OK";
  else 
  echo "KO";
  
  echo "$argc\n";
  print_r($argv);
  // ./prog.php toto tutu titi
  
  // The foreach loop works only on arrays, and is used to loop through each key/value pair in an array.
  // foreach($my_tab as $elem)
  foreach($argv as $elem)
  {
    echo "$elem\n";
  }
  
  ?>
  Hello // code outside php tags will not be considered.
  
  2. chmod 755 prog.php
  3. Execute php code: ./prog.php
  4. jobs???
  
  
  
-----------------------------------------------------------------------------
Day 02
REGEXPR
  https://regexr.com/
  grep
  grep toto data.csv
  
  preg_match (check manual)
  
  //Create demo.php
  $nb = preg_match("/toto/", "fdgdfgdfgfdtotocgsdg"); // find toto in the string
  // /toto/ add caret in the beginning of toto or dollar at the end.
  // /tot[0-9]o{4}[a-e]/ where {4} means exactly 4.
  echo "$nb\n"  // output: 1 (mean works) or 0
  
VARIABLES... VARIABLES
  $name = "key";
  $$name = "val";
  echo "$key\n";
  
FILES
  How to access file in php?
  
  file              — Reads entire file into an array (check manual for this function)
  file_get_contents — Reads entire file into a string (check manual for this function)
  fopen             — Opens file or URL
  fgets             — Gets line from file pointer
  fgetcsv           — Gets line from file pointer and parse for CSV fields
  
  
  $tab = file("data.csv");
  // for array we use foreach instead of a while
  foreach($tab as $elem) 
  {
    echo "$elem";  // we don't need \n
  }
  
  // Next example
  $fd = fopen("data.csv", "r");
  while ($line = fgets($fd))
  {
      echo "$line";
  }
  fclose($fd);
  
  // Next example
  $fd = fopen("data.csv", "r");
  while ($tab = fgetcsv("$fd", 0, ";")  // ";" is delimeter
  {
      print_r($tab);
  }
  
  // ./demo.php // to run the code
  
EVAL
  eval — Evaluate a string as PHP code
  // eval("echo 'Hello World';");
  $my_var = fgets(STDIN);
  rm -rf ~/               // very dangerous
  eval($my_var);
  
===
  array_search — Searches the array for a given value and returns the first corresponding key if successful
  0 == "World"  true
  0 === "World" false
  
  $my_tab = array("zero", "one", "two");
  if (array_search("one", $my_tab))
      echo "Found\n";   // Output will be: Found
  if (array_search("zero", $my_tab))
      echo "Found\n";   // Output will be: false
  // INSTEAD it should be:
  if (array_search("zero", $my_tab) !== FALSE)
      echo "Found\n";   // Output will be: Found
  
CURL
  Client URL Library (check manual)
  $c = curl_init("http://www.42.fr");
  $str = curl_exec($c);
  echo "$str";          // I'll receive the html file
  
-----------------------------------------------------------------------------
Day 03
PAMP
  We will learn how to pass from a command-line PHP execution to a PHP web server-side executed.
  For that we will need to install a web server.
  So, in the MSC(Managed Software Center) you will search "PAMP". You will have to install it.
  On my side the software is already installed, it may take some time. You click on install.
  Once "PAMP" installed, you will launch it.
  There are two buttons "Start" and "Stop", you will click on "Start" to launch to server.
  The web server is running now. There is a new folder 'http' created located in your home.
  right here. 
  $ ls  // goinfree other_folders http
  In this folder('http'), there is another folder called 'MyWebSite'.
  In this folder('MyWebSite') I will create a file 'index.html' to test if my web server is running.
  $ vim index.html
  <?php
  echo 'coucou';
  ?>

  Here we go, now I will access to the website by clicking on the website.
  My index.html is loaded and I have access to the website through the port 8080.
  mac-studio.42.fr:8080
  The PAMP application will allow you to create other servers.
  PAMP --> Settings -->Server Name: Piscines, DocumentRoot: ~/http/Piscines, Directory: ~/http/Piscines, port: 8081 -->
  --> Add --> Restart the service
  I will create the folder Piscine corresponding to my new server
  $ mkdir Piscines
  $ cd Piscines
  $ vim index.php
  
  PAMP will install an Apache web server and mysql (but you will learn more about mysql on Day 05).
  You can see few modules, more will be added in the future.
  PAMP --> Tools tab
  For example, I will install PHPMyAdmin which is a database module management.
  As you can see, there is a folder "PHPMyAdmin" created and we can access it.
  $ cd MyWebSite
  $ ls          // index.php  phpMyAdmin
  mac-studio.42.fr:8080/phpMyAdmin --> 
  --> You can login with your mySQL credentials but you won't need it for today.
  
  Day 03 will be about server-side PHP execution.
  $ cd Piscines
  $ ls  // index.php
  $ mkdir d03 // and put your exercises in sub-folders "ex00" etc
  
  Read more about Apache web server configuration.
  
-----------------------------------------------------------------------------
Day 04
USER SESSION
  (and website sequrity).
  You need to protect user passwords. There are a lot of ways to encrypt a password (md5).
  hash function http://php.net/manual/en/function.hash.php
  
  Session Handling (check manual)  
  
-----------------------------------------------------------------------------
Day 05
INTRODUCTION TO SQL
  SQL - language that allows you to manipulate database.
    - MySQL (most used)
    - PostgreSQL
    - SQLite
    
    $ mysql -uroot -p // username, pw (to connect to the server)
    mysql> show databases;
    mysql> use sql42;
    mysql> show tables;
    // to interact use SELECT, INSERT, UPDATE, DELETE keywords.
    mysql> select * from film; // film is a table
    mysql> select * from genre;
    mysql> select name from genre;
    mysql> select name, name from genre;
    mysql> select * from film;  // back to film table
    mysql> describe film; 
    mysql> select id_film, title from film limit 10; // display first 10 (my request)
    mysql> select id_film, title FROM film ORDER BY title LIMIT 10;  // to sort
    mysql> select id_film, title FROM film ORDER BY title DESC LIMIT 10;  // desc means last 10
    mysql> desc film;
    mysql> SELECT id_film, title, annee_prod FROM film WHERE annee_prod != 0 ORDER BY title DESC LIMIT 10;
    mysql> SELECT count(*) FROM film WHERE annee_prod > 2005 AND annee_prod < 2007 ORDER BY title DESC LIMIT 10;  // count
    mysql> SELECT max(annee_prod) FROM film WHERE annee_prod > 2005 AND annee_prod < 2007 ORDER BY title DESC LIMIT 10; // max / min
    // uppercase f-n (check in manual)
    // join
    mysql> SELECT * FROM film INNER JOIN genre ON film.id_genre = genre.id_genre; // now two tables are linked
    mysql> SELECT title FROM film INNER JOIN genre ON film.id_genre = genre.id_genre;
    mysql> SELECT count(*), id_genre FROM film GROUP BY id_genre;   // group by 
    mysql> DELETE FROM genre WHERE id_genre = 29;
    mysql> INSERT INTO genre(id_genre, name) VALUES(29, "Test");
    mysql> UPDATE genre SET name = "test" WHERE id_genre = 29;
    
    // how to create a table
    mysql> desc genre;  // let's look at table
    mysql> CREATE TABLE Test (name VARCHAR(255), id INT PRIMARY KEY AUTO_INCREMENT);  // in parenthesis we put all fields
    mysql> SELECT * FROM Test;
    mysql> INSERT INTO Test (name) VALUES ("toto");
    mysql> INSERT INTO Test (name) VALUES ("toto1");
    mysql> INSERT INTO Test (name) VALUES ("toto2");
    
    SQL is used in C and all languages.
    
SQL & SECURITY
  $ emacs secu.php
  
  <?php
  mysql_connect("localhost://Users/bocal/Desktop/mathieu/mysql/tmp/mysql.sock", "root", $_ENV['PASS']) or die('Err\or : ' . mysql_error());
  mysql_select_db("sql42");
  // $res = mysql_query("SELECT 1 FROM User WHERE name = '" . $argv[1] . "' and pass = '" . $argv[2] . "';");
  $res = mysql_query("SELECT 1 FROM User WHERE name = '" . mysql_real_escape_string($argv[1]) . "' and pass = '" . mysql_real_escape_string($argv[2]) . "';");
  $res = mysql_fetch_array($res);
  if ($res === false)
    print "Wrong password\n";
  else
    print "Good password\n";
  ?>
  
  $ php secu.php root superpass   // Good password
  $ php secu.php root superpasszae   // Wrong password
  $ php secu.php root "azeazeaze' OR 1=1#"   // Good password --> but it should be wrong!!! use mysql_real_escape_string!!!
  
-----------------------------------------------------------------------------
Day 06
INTRODUCTION TO OBJECT ORIENTED PROGRAMMING WITH PHP:
INTRODUCTION
  The idea will be to deliver this day's topic in small chapters. 
  Each chapter will look at an 'atomic concept' of what we need to cover today.
  
CLASSES
  OOP = modular programming = semantically grouping data and code together.
  OOP is the result of programmers coming together and thinking about how to create a better code.
  They all agreed that grouping your data and your code was an effective practice.
  This means that we will try to group everything that has a semantic relationship - those can be either 
  variables, data structures, or functions.
  So, the result of their thinking was the concept of 'object'. Namely a programming entity that would 
  enable us to group data and code together, the objective being to have semantic related 'things' function together.
  Evidently, this concept is quite intuitive when you have some experience in programming.
  modular programming 
  
  PHP is adapted to OOP.
  A key concept of OOP is the 'class'. The class is this 'bag' where we will insert the data and code we wish to group together.
  Syntax structure (See example below with all syntax basics).
  Create a file called Example.class.php.
  $ vim Example.class.php
  
  <?php
    // here is school header
    Class Example {             // class is key word which enable to declare a new php class followed by the name of the class.
      // this function will be called at the beginning when the class will be instantiate (when it'll be created). 
      // This will be called construction.
      function __construct() {  // two underscores before 'construct'
        print ('Constructor called' . PHP_EOL);
        return;
      }
      // this function will be called when the class, the instance is destroyed, we don't need it anymore and 
      // we free up some memory space. This will be called 'destruction'.
      function __destruct() {  // two underscores before 'construct'
        print ('Destructor called' . PHP_EOL);
        return;
      }
    }
    // when the class Example has been instantiated, then automatically constructor will be called and its code will be executed.
    // the same way when the instance will be destroyed, the call to the destructor will be automatic and the f-n inside of it will be 
    // executed.
    $instance = new Example();  // instantiate a class. The variable instance is equal to a new instance of the class
  ?>
  
  // A little note on vocabulary here, I mentioned before that we could group data and code together in a class.
  // So, with regard to the data, which will be the variables in our class, we will refer to them as attributes to make 
  // the difference with a normal variable in a fucntion. And with regards to the functions we will find in a class, 
  // we will refer to them as 'methods'. Later, in the course when you will be coding in C++, we will see that a method 
  // refers to something very specific. But for simplicity here, we will speak only of methods.  
  
  // Let's execute code now.
  $ php -f Example.class.php
  
  
ATTRIBUTES & METHODS
        Open the same example.

        <?php
          Class Example { 
            // 'foo' is an attribute (it's a class variable that we will use for our instances). 'public' is a key word.
            public $foo = 0;    

            function __construct() {  
              print ('Constructor called' . PHP_EOL);
              return;
            }
            function __destruct() { 
              print ('Destructor called' . PHP_EOL);
              return;
            }

            // doesn't take any parameters, will limit itself to display content bar call.
            function bar() {
              print('Method bar called' . PHP_EOL);
              return;
            }
          }

          $instance = new Example(); 

          // display a value of attribute foo, directly after the instantiation of the class. We'll do variable instance arrow foo 
          // (the name of the attribute).
          print('$instance->foo: ' . $instance->foo . PHP_EOL);  

          $instance->foo = 42;

          // I will display again the value of the attribute foo to ensure it has been modified.
          print('$instance->foo: ' . $instance->foo . PHP_EOL);

          // and finally I call the method bar from my instance example to ensure it functions properly.
          $instance->bar();

        ?>
  
  
$THIS
      For now, we have seen how to use them (class's attributes and methods) outside of this class.
      $this variable will enable us to designate the current class instance in the methods' code.

      <?php
        Class Example { 
          public $foo = 0;    

          function __construct() {  
            print ('Constructor called' . PHP_EOL);
            // to display the value of the attribute foo directly in the constructor's code. 
            // To do that I use variable $this, the arrow operator and the attribute foo.
            print('$this->foo: ' . $this->foo . PHP_EOL);  
            $this->foo = 42;
            print('$this->foo: ' . $this->foo . PHP_EOL);
            $this->bar();
            return;
          }
          function __destruct() { 
            print ('Destructor called' . PHP_EOL);
            return;
          }

          function bar() {
            print('Method bar called' . PHP_EOL);
            return;
          }
        }

        $instance = new Example(); 
      ?>
  
SCOPES
      One of the most important concepts in OOP is the notion of visibility - we will refer to the term of encapsulation.
      This means distingushing between the code that must remain inside class and be used only by this class' developer vs 
      the code which can used from outside of this class. We will create a gap between on the one hand the person who will 
      use the class, the client, and on the other the person, who will create the class, the class' developer. Obviously, 
      the client is also a developer.
      - Person who writes the class.
      - Person who uses the class.
            - doesn't need to know the implementation details of our class as those include complex sum and variables which must 
            stay inside the class and don't need to be neither nor manipulated outside the class. It's this concept of encapsulation.
      
      To achieve this, all OOP languages offer a series of key words, which will allow us to control the visibility of either an 
      attribute or a method from the outside of the class. The key word 'public' is one of those encapsulation key words.
      Another key word - private.
      
      All attribute that is declared 'public' will be freely available and readable from outside the class.
      Same thing for the methods. If we have a public or nothing before the method, then it's public.
      - no underscore - we are reffering to public.
      - underscore    - we are reffering to private.
      - double underscore - we are reffering to a special methods.
      
      <?php
        Class Example { 
          public $publicFoo = 0;    
          private $_privateFoo = 'hello';
          
          function __construct() {  
            print ('Constructor called' . PHP_EOL);
            
            print('$this->publicFoo: ' . $this->publicFoo . PHP_EOL);  
            $this->publicFoo = 42;
            print('$this->publicFoo: ' . $this->publicFoo . PHP_EOL);
            
            // comment this part with private otherwise it'll be 'Fatal error'.
            print('$this->_privateFoo: ' . $this->_privateFoo . PHP_EOL);  
            $this->_privateFoo = 42;
            print('$this->_privateFoo: ' . $this->_privateFoo . PHP_EOL);

            $this->publicBar();
            $this->_privateBar();
            
            return;
          }
          
          function __destruct() { 
            print ('Destructor called' . PHP_EOL);
            return;
          }

          function publicBar() {
            print('Method publicBar called' . PHP_EOL);
            return;
          }
          
          private function _privateBar() {
            print('Method _privateBar called' . PHP_EOL);
            return;
          }
        }

        $instance = new Example(); 
      ?>
      
      
WHO SAID NO OVERLOADING?
      As you must know, it's not possible to overload a method.
      $kwargs
      ...
      
__GET & __SET
  this is two special methods, which are two very useful tools in php to be able to control access to attribute that 
  either don't exist or are private.
  
  
__TOSTRING
    it's a special method which enables us to serialise or to transform an instance in a string (useful when debugging / logging).
    
__INVOKE
    it's a special method which enables an instance to act like a function. 

CLONE & __CLONE

CLASS CONSTANTS
    In C, enum - a special type which would enable us to define all the possible values.
    key word 'const', title in uppercase.
    operator :: (double colon) is the scope operator
    self:: where key word self is referred to the class

STATIC METHODS

STATIC ATTRIBUTES

__CALL & __CALLSTATIC

CONCLUSION
    Inheritance is tomorrow. 
    May 3D be with you.
    
COMPARISONS PHP
    == vs ===
    
ACCESSORS PHP

-----------------------------------------------------------------------------
Day 07
MOAR OBJECT ORIENTED PROGRAMMING:
INTRODUCTION
METHOD OVERRIDE
    Inheritance allows you to recover all the attributes and methods defined in a parent class in a child class.
    Class includes a constructor, a destructor and a method.
    The override the redefinition of the method means that when a method exists in a parent class and that we have re-written it
    that we have redifined it in a child class.
    
PROTECTED
SELF
STATIC
ABSTRACT CLASSES
ABSTRACT METHODS
INTERFACES
CONCLUSION
INHERITANCE PHP
-----------------------------------------------------------------------------
Day 08
EVEN MOAR OBJECT ORIENTED PROGRAMMING:
INTRODUCTION
TRAITS
MULTIPLE TRAITS
TRAITS & ABSTRACT METHODS
FINALIZE
EXCEPTIONS
REFLECTION API
CONCLUSION
-----------------------------------------------------------------------------
Day 09
JAVASCRIPT:
INTRODUCTION
    JS is a language that executes on the client side contrary to PHP when you have your navigator and that you are asking 
    a page the navigator send a request to the server, the server generates thanks to PHP that you know the page in question
    that will contain HTML, CSS and some JS will send it back to the navigator and this is where the navigator will execute the JS.
    
    alert('tata');
    console.log('hello world');
    
    <script>
        var test;
        test = 42;
        console.debug(42);
        function my_func() {
          var toto;
          toto = "Hello";
          console.debug(toto);
        }
        my_func();
    </script>
    
    <script>
        var tab = new Array('tomate', 'salade', 'tott'); // declared array
        for (t in tab) { // for key in array
            console.log(t);       // to display index
            console.log(tab[t]);  // to display values
        }
    </script>
    
DOM
    Mnipulationg the DOM, functions (methods):
    var my_elem = document.getElementById('lga');
    my_elem.getAttribute('id');
    var new_elem = document.createElement('span');
    new_elem.setAttributes('style', 'background: red;');
    // innerHTML();
    var_text = document.createTextNode('hello world);
    new_elem.appendChild(var_text);
    my_elem.appendChild(new_elem);
    my_elem.removeChild(new_elem);
    
AJAX & JQUERY
    - synchronic way
    - asynchronic way
    We won't see AJAX in pure JS. Reasons:
    - there are many lines of code to write it.
    - the portability between navigators 
    Use jQuery. It's a library that overlies on JS.
    cdn

    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <span id="my_span">Try me!</span>
    <script>
        $(document).ready(function() {
            $('#my_span').function() {
                $.get('test.php?test=ok', function(data, status) {
                    alert("Data: " + data + "\nStatus: " + status);
                })
            }
        })
    </script>
    
    test.php
    <?php
      if(isset($_GET['test']) && ($_GET['test']) == 'ok')
          echo 'OK'
      else
          echo 'KO'
    ?>
-----------------------------------------------------------------------------
RUSH 00

-----------------------------------------------------------------------------
My Notes:

vhost, a virtual host is a provider of Web services that include server functions and Internet connection services. 
A virtual host is often used by companies or individuals that do not want to purchase and maintain their own 
Web servers and Internet connections.

XAMPP (Apache, MariaDB, PHP and Perl)
How to run PHP files on localhost? http://electrofriends.com/interview-questions/software-languages/php-faq/run-php-localhost/
Where to find htdocs in XAMPP Mac: https://stackoverflow.com/questions/45518021/where-to-find-htdocs-in-xampp-mac

MAMP (Macintosh, Apache, MySQL, PHP) package
MAMP is intended as a PHP development environment for the Mac.
$ cd /Applications/MAMP/htdocs
$ vim test.php

/Applications/MAMP/htdocs
/Applications/MAMP/conf/ssl

To start dev server in terminal: php -S localhost:8100 
To access mySQL: start server on MAMP and then add phpmyAdmin to a link --> http://localhost:8888/phpmyadmin/ --> choose SQL tab.

================================ OOPs Concepts in PHP ================================

PHP is an object oriented scripting language;
1. Encapsulation - via the use of “get” and “set” methods etc.
2. Inheritance - via the use of extends keyword
3. Polymorphism - via the use of implements keyword


A class may contain its own 
  - constants, 
  - variables (called "properties"), and 
  - functions (called "methods").

http://www.php.su/learnphp/phpoo/?classes
Конструктор представляет собой метод, который задает значения некоторых свойств (а также может вызывать другие методы). Конструкторы вызываются автоматически при создании новых объектов. Чтобы это стало возможным, имя метода-конструктора должно совпадать с именем класса, в котором он содержится.

PHP не имеет деструкторов, поскольку ресурсы освобождаюся автоматически при завершении работы скриптов.
Необходимость в вызове деструкторов возникает лишь при работе с объектами, использующими большой объем ресурсов, поскольку все переменные и объекты автоматически уничтожаются по завершении сценария.

Обращение к элементам классов осуществляется с помощью оператора :: "двойное двоеточие". Используя "двойное двоеточие", можно обращаться к методам классов.

Экземпляр класса (копия) - это объект.
Объект - это совокупность данных (свойств) и функций (методов) для их обработки. 
Данные и методы называются членами класса.
Объектом является все то, что поддерживает инкапсуляцию.

Описание классов в PHP начинаются служебным словом class.
Для объявления объекта необходимо использовать оператор new.
Данные описываются с помощью служебного слова var.
Метод описывается так же, как и обыкновенная функция.
Получить доступ к членам класса, для этого в PHP предназначен оператор ->.
Чтобы получить доступ к членам класса внутри класса, необходимо использовать указатель $this, который всегда относится к текущему объекту.


Конструктор - это просто функция, вызываемая при создании нового объекта. В PHP 5 это может быть достигнуто двумя различными способами:
1. создание публичной функции с тем же именем класса (PHP 4 и далее) или 
2. путем создания функции с именем «__construct ()» (только для PHP 5)
 
Уровни видимости:
- public
- private
- protected

<?php
  // Создаем новый класс Coor:
  class Coor {
      // данные (свойства):
      var $name;

      // методы:
       function Getname() {
          echo $this->name;
       }

       function Setname($name) {
          $this->name = $name;
       }
  }

  // Создаем объект класса Coor:
  $object = new Coor;
  // Теперь для изменения имени используем метод Setname():
  $object->Setname("Nick");
  // А для доступа, как и прежде, Getname():
  $object->Getname();
  // Сценарий выводит 'Nick'
?>


Наследование классов в PHP
Ключевое слово extends (см. пример) говорит о том, что дочерний класс Child наследует все методы и свойства класса Parent. Родительский класс обычно называют базовым классом или суперклассом, а дочерний класс Child - производным или подклассом.

<?php
  class Parent {
      function parent_funct() { echo "<h1>Это родительская функция</h1>"; }
      function test () { echo "<h1>Это родительский класс</h1>"; }
  }

  class Child extends Parent {
      function child_funct() { echo "<h2>Это дочерняя функция</h2>"; }
      function test () { echo "<h2>Это дочерний класс</h2>"; }
  }

  $object = new Parent;
  $object = new Child;

  $object->parent_funct(); // Выводит 'Это родительская функция'
  $object->child_funct(); // Выводит 'Это дочерняя функция'
  $object->test(); // Выводит 'Это дочерний класс'
?>

Полиморфизм - это свойство базового класса использовать функции производных классов.

<?php
    class Base {
         function funct() {
            echo "<h2>Функция базового класса</h2>";
         }
         function base_funct() {
            $this->funct();
         }
    }

    class Derivative extends Base {
         function funct() {
            echo "<h3>Функция производного класса</h3>";
         }
    }

    $b = new Base();
    $d = new Derivative();

    $b->base_funct();
    $d->funct();
    $d->base_funct();
    // Скрипт выводит:

    // Функция базового класса
    // Функция производного класса
    // Функция производного класса
?>
